---
- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - "./vars/redacre_aws_vars.yml"

  tasks:

    - name: Obtain default VPC information
      amazon.aws.ec2_vpc_net_info:
        region: "{{ vpc_region }}"
        filters:
          "isDefault": "true"
      register: default_vpc
    
    - name: Obtain subnets for default VPC
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ vpc_region }}"
        filters:
          vpc-id: "{{ default_vpc['vpcs'][0]['vpc_id'] }}"
      register: subnet_info
    
    # Select a random subnet from the list of subnet ids
    - set_fact:
        vpc_id: "{{ default_vpc['vpcs'][0]['vpc_id'] }}"
        random_subnet: "{{ subnet_info.subnets|map(attribute='id')|list|random }}"

    - name: Create a new EC2 key if it does not exist already
      amazon.aws.ec2_key:
        key_type: rsa
        name: "{{ ec2_key }}"
        region: "{{ vpc_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
      register: ec2_key_result
 
    - name: Save private key
      copy: content="{{ ec2_key_result.key.private_key }}" dest="{{ playbook_dir }}/aws.{{ ec2_key }}.pem" mode=0600
      when: ec2_key_result.changed

    # Gather IP facts from ipify.org, will be saved to ipify_public_ip
    - name: Get my public IP
      ipify_facts:


    # Create Security Group and save the output into security_group
    - name: Create Security Group
      ec2_group:
        name: "{{ instance_name }}-sg"
        description: Security Group for redacre
        vpc_id: "{{ vpc_id }}"
        region: "{{ vpc_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "{{ ipify_public_ip }}/32"
            rule_desc: "allow port 22 from {{ ipify_public_ip }}"
      register: security_group


    - name: Provision a set of instances
      amazon.aws.ec2_instance:
        key_name: "{{ ec2_key }}"
        region: "{{ vpc_region }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        vpc_subnet_id: "{{ random_subnet }}"
        wait: yes
        exact_count: 1
        network:
          assign_public_ip: yes
        name: "{{ instance_name }}"
        security_group: "{{ instance_name }}-sg"
        state: running
        tags:
          Environment: redacre
      register: ec2

    - name: Add the newly created EC2 instance(s) to the local host group
      local_action: lineinfile
                    path="{{ playbook_dir }}/inventory/ec2"
                    regexp="{{ item.public_ip_address }}"
                    insertafter="[redacre_interview_ec2_host]" line="{{ item.public_ip_address }} ansible_user=ubuntu ansible_ssh_private_key_file={{ playbook_dir }}/aws.{{ ec2_key }}.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no'"
      with_items: "{{ ec2.instances }}"


- hosts: redacre_interview_ec2_host
  become: yes
  gather_facts: false
  tasks:

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        pkg:
          - docker-ce
          - docker-compose
        state: latest
        update_cache: yes

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Copy node_exporter binary file from /tmp/ to /usr/local/bin/
      ansible.builtin.copy:
        src: {{ playbook_dir }}/../task_1
        dest: /tmp/deployment
        owner: root
        group: root
        mode: '0744'
        remote_src: yes

    - name: Run `docker-compose up --build` 
      community.docker.docker_compose:
        project_src: /tmp/deployment/
        build: yes
      register: output
